###############################################################################
# Copyright (c) 2025, 2025 IILS mbH and others
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# https://www.eclipse.org/legal/epl-2.0/.
#
# SPDX-License-Identifier: EPL-2.0
#
# Contributors:
#     Hannes Wellmann (IILS mbH) - initial API and implementation
###############################################################################
name: Release
# Releases the main branch with as version currently configured in the parent pom, assuming it aligns with the targeted upstream Eclipse-Passage release.

on:
  workflow_dispatch

permissions: {}
env:
  MAVEN_ARGS: '--no-transfer-progress --batch-mode'

jobs:
  release-build:
    uses: ./.github/workflows/build.yml
    permissions:
      contents: read

  publish-release:
    needs: 'release-build'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: read
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
    - name: Read version
      id: read-version
      working-directory: 'releng/org.eclipse.passage.parent'
      run: |
        mvn help:evaluate -Dexpression=project.version '-Doutput=projectVersion-value.txt'
        version=$(cat projectVersion-value.txt)
        version=${version%%-SNAPSHOT}
        echo "version=${version}"
        echo "version=${version}" >> "$GITHUB_OUTPUT"
    - name: Initialize
      id: initialize
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: ${{ steps.read-version.outputs.version }}
      run: |
        set -x
        userName=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /users/${{ github.actor}} \
          --jq '.name')
        git config user.name "${userName}"
        git config user.email "info@iils.de"
        
        versionDashed=$(echo "${VERSION}" | sed 's|\.|_|g')
        echo "versionDashed=${versionDashed}" >> "$GITHUB_OUTPUT"

    - name: Update release information
      env:
        VERSION: ${{ steps.read-version.outputs.version }}
        RELEASE_TAG: v${{ steps.read-version.outputs.version }}
        VERSION_DASHSED: ${{ steps.initialize.outputs.versionDashed }}
      run: |
        set -x
        sed --in-place \
          --expression="s|[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+|${VERSION}|g" \
          --expression="s|[[:digit:]]\+_[[:digit:]]\+_[[:digit:]]\+|${VERSION_DASHSED}|g" \
          README.md
        
        # Commit updated README and add release tag (use current HEAD as new commits will be rebased on submission)
        git tag -a "${RELEASE_TAG}" -m "Release ${RELEASE_TAG}"
        git commit --all --message="Release ${RELEASE_TAG}"
        
        # Prepare next development cycle
        export NEW_VERSION="${VERSION%.*}.$((${VERSION##*.}+1))"
        chmod +x releng/updateVersions.sh
        releng/updateVersions.sh
        
        # Update baseline repositories to new release
        releaseRepoURLPrefix='github.com/iils-mbh/eclipse.passage.fls/releases/download/v'
        releaseRepoPattern="s|${releaseRepoURLPrefix}[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+|${releaseRepoURLPrefix}${VERSION}|g"
        sed --in-place --expression="${releaseRepoPattern}" \
          releng/org.eclipse.passage.parent/pom.xml
        sed --in-place --expression="${releaseRepoPattern}" \
          releng/org.eclipse.passage.target/org.eclipse.passage.baseline.target
        
        git commit --all --message="Prepare next development cycle"

    - name: Obtain P2 repository
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: p2-repository
        path: 'repository'

    - name: Create GH release and preparation PR
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: ${{ steps.read-version.outputs.version }}
        RELEASE_TAG: v${{ steps.read-version.outputs.version }}
        VERSION_DASHSED: ${{ steps.initialize.outputs.versionDashed }}
      run: |
        set -x
        git push origin "${RELEASE_TAG}"
        gh release create "${RELEASE_TAG}" --verify-tag --latest \
          --notes "The Passage Floating License Server (FLS) component targeting [Passage ${VERSION}](https://github.com/eclipse-passage/passage/releases/tag/R${VERSION_DASHSED})". \
          'repository/*'
        
        branchName="release_${VERSION}"
        git push origin HEAD:refs/heads/${branchName}
        gh pr create --base main --head ${branchName} \
          --title "Release ${VERSION}" --body "Complete ${VERSION} release and prepare for next development iteration." 
